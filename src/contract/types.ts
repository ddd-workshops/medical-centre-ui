/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/appointments": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get all appointments
         * @description Retrieve a list of all appointments
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Successful response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Appointment"][];
                    };
                };
            };
        };
        put?: never;
        /** Create a new appointment */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["AppointmentCreate"];
                };
            };
            responses: {
                /** @description Appointment created successfully */
                201: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Appointment"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/appointments/{appointmentId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** Update an appointment */
        put: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    appointmentId: string;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["AppointmentUpdate"];
                };
            };
            responses: {
                /** @description Appointment updated successfully */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        post?: never;
        /** Delete an appointment */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    appointmentId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Appointment deleted successfully */
                204: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/referrals": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Create a new referral */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["ReferralCreate"];
                };
            };
            responses: {
                /** @description Referral created successfully */
                201: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Referral"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/referrals/{referralId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** Update a referral */
        put: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    referralId: string;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["ReferralUpdate"];
                };
            };
            responses: {
                /** @description Referral updated successfully */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        post?: never;
        /** Delete a referral */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    referralId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Referral deleted successfully */
                204: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        Appointment: {
            /** Format: uuid */
            id: string;
            patientId: string;
            doctorName: string;
            /** Format: date-time */
            date: string;
            /** @enum {string} */
            status: "SCHEDULED" | "COMPLETED" | "CANCELLED";
            notes?: string;
        };
        AppointmentCreate: {
            patientId: string;
            doctorId: string;
            date: string;
            time: string;
            description?: string;
        };
        AppointmentUpdate: {
            date?: string;
            time?: string;
            description?: string;
            /** @enum {string} */
            status?: "SCHEDULED" | "COMPLETED" | "CANCELLED";
        };
        Referral: {
            id: string;
            patientId: string;
            issuingDoctorId: string;
            targetSpeciality: string;
            diagnosis: string;
            recommendations: string;
            issueDate: string;
            expiryDate: string;
            /** @enum {string} */
            status: "ACTIVE" | "USED" | "EXPIRED";
        };
        ReferralCreate: {
            patientId: string;
            targetSpeciality: string;
            diagnosis: string;
            recommendations: string;
            expiryDate: string;
        };
        ReferralUpdate: {
            /**
             * Format: uuid
             * @description The ID of the referral to update
             */
            referralId: string;
            /** @enum {string} */
            status: "ACTIVE" | "USED" | "EXPIRED";
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export type operations = Record<string, never>;
