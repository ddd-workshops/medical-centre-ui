/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/auth/login": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Login user */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["LoginRequest"];
                };
            };
            responses: {
                /** @description Login successful */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["PatientProfile"];
                    };
                };
                /** @description Invalid credentials */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/auth/logout": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Logout user */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Logout successful */
                204: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/appointments": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get all appointments
         * @description Retrieve a list of all appointments
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Successful response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Appointment"][];
                    };
                };
            };
        };
        put?: never;
        /** Create a new appointment */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["AppointmentCreate"];
                };
            };
            responses: {
                /** @description Appointment created successfully */
                201: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Appointment"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/appointments/{appointmentId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get appointment details */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    appointmentId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Appointment details retrieved successfully */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Appointment"];
                    };
                };
                /** @description Appointment not found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        /** Update an appointment */
        put: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    appointmentId: string;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["AppointmentUpdate"];
                };
            };
            responses: {
                /** @description Appointment updated successfully */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        post?: never;
        /** Delete an appointment */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    appointmentId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Appointment deleted successfully */
                204: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/referrals": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Create a new referral */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["ReferralCreate"];
                };
            };
            responses: {
                /** @description Referral created successfully */
                201: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Referral"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/referrals/{referralId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** Update a referral */
        put: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    referralId: string;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["ReferralUpdate"];
                };
            };
            responses: {
                /** @description Referral updated successfully */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        post?: never;
        /** Delete a referral */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    referralId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Referral deleted successfully */
                204: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/notifications": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get all notifications without full content */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description List of notifications */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["NotificationListItem"][];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/notifications/{notificationId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get a single notification with full content */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    notificationId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Complete notification details */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Notification"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/notifications/{notificationId}/read": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** Mark a notification as read */
        put: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    notificationId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Notification marked as read successfully */
                204: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cms/pages": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List all available CMS pages */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description List of all pages */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["CMSPageContent"][];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cms/pages/{slug}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get CMS page content by slug */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    slug: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Page content retrieved successfully */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["CMSPageContent"];
                    };
                };
                /** @description Page not found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/profile": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get patient profile
         * @description Retrieve the profile information of the logged-in patient
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Successful response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["PatientProfile"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        Appointment: {
            /** Format: uuid */
            id: string;
            /** Format: uuid */
            patientId: string;
            patientName?: string;
            doctor: {
                /** Format: uuid */
                id: string;
                name: string;
                specialty: string;
            };
            /** Format: date-time */
            date: string;
            /** @enum {string} */
            status: "SCHEDULED" | "COMPLETED" | "CANCELLED";
            notes?: string;
            medicalNotes?: string;
            prescriptions?: string[];
            billing?: {
                amount: number;
                /** @enum {string} */
                status: "PENDING" | "PAID" | "CANCELLED";
            };
        };
        AppointmentCreate: {
            patientId: string;
            doctorId: string;
            date: string;
            time: string;
            description?: string;
        };
        AppointmentUpdate: {
            /** Format: uuid */
            appointmentId: string;
            date?: string;
            time?: string;
            description?: string;
            /** @enum {string} */
            status?: "SCHEDULED" | "COMPLETED" | "CANCELLED";
        };
        Referral: {
            id: string;
            patientId: string;
            issuingDoctorId: string;
            targetSpeciality: string;
            diagnosis: string;
            recommendations: string;
            issueDate: string;
            expiryDate: string;
            /** @enum {string} */
            status: "ACTIVE" | "USED" | "EXPIRED";
        };
        ReferralCreate: {
            patientId: string;
            targetSpeciality: string;
            diagnosis: string;
            recommendations: string;
            expiryDate: string;
        };
        ReferralUpdate: {
            /**
             * Format: uuid
             * @description The ID of the referral to update
             */
            referralId: string;
            /** @enum {string} */
            status: "ACTIVE" | "USED" | "EXPIRED";
        };
        Notification: {
            /** Format: uuid */
            id: string;
            title: string;
            subtitle: string;
            /** Format: date-time */
            receivedDate: string;
            /** @default false */
            read: boolean;
            content: string;
        };
        NotificationListItem: {
            /** Format: uuid */
            id: string;
            title: string;
            subtitle: string;
            /** Format: date-time */
            receivedDate: string;
            /** @default false */
            read: boolean;
        };
        CMSPageContent: {
            slug: string;
            /** Format: date-time */
            lastUpdated: string;
            /** @description Markdown content */
            content: string;
        };
        Address: {
            country: string;
            city: string;
            street: string;
            postalCode: string;
        };
        PatientProfile: {
            firstName: string;
            lastName: string;
            phoneNumber: string;
            username: string;
            address: components["schemas"]["Address"];
        };
        LoginRequest: {
            username: string;
            password: string;
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export type operations = Record<string, never>;
