openapi: '3.0.0'
info:
  title: Bright Smiles Architects API
  version: '1.0.0'
  description: API for managing dental clinics

servers:
  - url: 'http://localhost:3001/api'
    description: Local development server

paths:
  /auth/login:
    post:
      tags:
        - Authentication
      summary: Login user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PatientProfile'
        '401':
          description: Invalid credentials

  /auth/register:
    post:
      tags:
        - Authentication
      summary: Register new patient
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterRequest'
      responses:
        '201':
          description: Registration successful
        '400':
          description: Invalid registration data
        '409':
          description: Username or email already exists

  /auth/logout:
    post:
      tags:
        - Authentication
      summary: Logout user
      responses:
        '204':
          description: Logout successful

  /appointments:
    get:
      tags:
        - Appointments
      summary: Get all appointments
      description: Retrieve a list of all appointments
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/AppointmentBrief'
    post:
      tags:
        - Appointments
      summary: Create a new appointment
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AppointmentCreateRequest'
      responses:
        '201':
          description: Appointment created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AppointmentDetails'

  /appointments/{appointmentId}:
    get:
      tags:
        - Appointments
      summary: Get appointment details
      parameters:
        - name: appointmentId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Appointment details retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AppointmentDetails'
        '404':
          description: Appointment not found
    put:
      tags:
        - Appointments
      summary: Update an appointment
      parameters:
        - name: appointmentId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AppointmentUpdateRequest'
      responses:
        '200':
          description: Appointment updated successfully

  /referrals:
    get:
      tags:
        - Referrals
      summary: Get all referrals
      responses:
        '201':
          description: Referral created successfully
          content:
            application/json:
              schema:
                type: array
                $ref: '#/components/schemas/Referral'
    post:
      tags:
        - Referrals
      summary: Create a new referral
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReferralCreateRequest'
      responses:
        '201':
          description: Referral created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Referral'

  /referrals/{referralId}:
    put:
      tags:
        - Referrals
      summary: Update a referral
      parameters:
        - name: referralId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReferralUpdateRequest'
      responses:
        '200':
          description: Referral updated successfully

  /notifications:
    get:
      tags:
        - Notifications
      summary: Get all notifications without full content
      responses:
        '200':
          description: List of notifications
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/NotificationListItem'

  /notifications/{notificationId}:
    get:
      tags:
        - Notifications
      summary: Get a single notification with full content
      parameters:
        - name: notificationId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Complete notification details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Notification'

  /notifications/{notificationId}/read:
    put:
      tags:
        - Notifications
      summary: Mark a notification as read
      parameters:
        - name: notificationId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: Notification marked as read successfully

  /cms/pages:
    get:
      tags:
        - CMS
      summary: List all available CMS pages
      responses:
        '200':
          description: List of all pages
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CMSPageContent'

  /cms/pages/{slug}:
    get:
      tags:
        - CMS
      summary: Get CMS page content by slug
      parameters:
        - name: slug
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Page content retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CMSPageContent'
        '404':
          description: Page not found

  /patient/profile:
    get:
      tags:
        - Patients
      summary: Get patient profile
      description: Retrieve the profile information of the logged-in patient
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PatientProfile'

  /patient/treatments:
    get:
      tags:
        - Patients
      summary: Get prescribed treatments for a patient
      responses:
        '200':
          description: List of prescribed treatments
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/PrescribedTreatment'

  /treatments:
    get:
      tags:
        - Patients
      summary: Get all available treatments
      responses:
        '200':
          description: List of treatments
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/MedicalTreatment'

  /app/status:
    get:
      tags:
        - Application
      summary: Get application status information
      description: Retrieve the current status information for the application
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AppStatus'

components:
  schemas:

    AppointmentDetails:
      type: object
      properties:
        id:
          type: string
          format: uuid
        patient:
          $ref: '#/components/schemas/PatientBrief'
        doctor:
          $ref: '#/components/schemas/DoctorBrief'
        serviceType:
          $ref: '#/components/schemas/ServiceType'
        location:
          $ref: '#/components/schemas/ClinicBrief'
        datetime:
          type: string
          format: date-time
        status:
          type: string
          enum: [SCHEDULED, COMPLETED, CANCELLED]
        notes:
          type: string
        prescriptions:
          type: array
          items:
            type: string
        billing:
          $ref: '#/components/schemas/Billing'
      required:
        - id
        - patient
        - doctor
        - serviceType
        - location
        - datetime
        - status

    AppointmentBrief:
      type: object
      properties:
        id:
          type: string
          format: uuid
        patientName:
          type: string
        doctor:
          type: string
        serviceType:
          type: string
        location:
          type: string
        datetime:
          type: string
          format: date-time
        status:
          type: string
          enum: [SCHEDULED, COMPLETED, CANCELLED]
      required:
        - id
        - patient
        - doctor
        - serviceType
        - location
        - datetime
        - status

    AppointmentCreateRequest:
      type: object
      properties:
        patientId:
          type: string
          format: uuid
        doctorId:
          type: string
          format: uuid
        serviceTypeId:
          type: string
          format: uuid
        datetime:
          type: string
          format: date-time
      required:
        - patientId
        - doctorId
        - serviceTypeId
        - datetime

    AppointmentUpdateRequest:
      type: object
      required:
        - appointmentId
      properties:
        appointmentId:
          type: string
          format: uuid
        datetime:
          type: string
          format: date-time
        time:
          type: string
        description:
          type: string
        status:
          type: string
          enum: [SCHEDULED, COMPLETED, CANCELLED]

    MedicalTreatment:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        shortDescription:
          type: string
        expectedDuration:
          type: object
          properties:
            min:
              type: integer
              description: Minimum expected duration in minutes
            max:
              type: integer
              description: Maximum expected duration in minutes
          required:
            - min
            - max
        priceRange:
          type: object
          properties:
            min:
              type: number
              format: float
              description: Minimum price in the local currency
            max:
              type: number
              format: float
              description: Maximum price in the local currency
          required:
            - min
            - max
        doctorBrief:
          $ref: '#/components/schemas/DoctorBrief'
        patientBrief:
          $ref: '#/components/schemas/PatientBrief'
      required:
        - id
        - name
        - shortDescription
        - expectedDuration
        - priceRange
        - doctorBrief
        - patientBrief

    PrescribedTreatment:
      type: object
      properties:
        id: 
          type: string
          format: uuid
        prescribedDate:
          type: string
          format: date-time
        description:
          type: string
          format: date-time
        patient:
          $ref: '#/components/schemas/PatientBrief'
        doctor:
          $ref: '#/components/schemas/DoctorBrief'
        treatment:
          $ref: '#/components/schemas/MedicalTreatment'
        appointments:
          type: array
          items:
            $ref: '#/components/schemas/AppointmentBrief'
        status:
          type: string
          enum: [SCHEDULED, IN_PROGRESS, COMPLETED, CANCELLED]
      required:
        - id
        - prescribedDate
        - patient
        - doctor
        - treatment
        - status

    DoctorBrief:
      type: object
      properties:
        id:
          type: string
          format: uuid
          description: Unique identifier for the doctor
        fullName:
          type: string
          description: Full name of the doctor including titles (e.g. "Dr. John Smith")
        specialties:
          type: array
          description: List of doctor's areas of specialization (e.g. ["Orthodontics", "Dental Surgery"])
          items:
            type: string
        locations:
          type: array
          items:
            $ref: '#/components/schemas/ClinicBrief'
      required:
        - id
        - fullName
        - specialties

    Referral:
      type: object
      properties:
        id:
          type: string
          format: uuid
        patientId:
          type: string
          format: uuid
        issuingDoctorId:
          type: string
          format: uuid
        targetSpecialty:
          type: string
        diagnosis:
          type: string
        recommendations:
          type: string
        issueDate:
          type: string
          format: date
        expiryDate:
          type: string
          format: date
        status:
          type: string
          enum: [ACTIVE, USED, EXPIRED]
      required:
        - id
        - patientId
        - issuingDoctorId
        - targetSpecialty
        - diagnosis
        - recommendations
        - issueDate
        - expiryDate
        - status

    ReferralCreateRequest:
      type: object
      properties:
        patientId:
          type: string
          format: uuid
        targetSpecialty:
          type: string
        diagnosis:
          type: string
        recommendations:
          type: string
        expiryDate:
          type: string
          format: date
      required:
        - patientId
        - targetSpecialty
        - diagnosis
        - recommendations
        - expiryDate

    ReferralUpdateRequest:
      type: object
      required:
        - referralId
        - status
      properties:
        referralId:
          type: string
          format: uuid
          description: The ID of the referral to update
        status:
          type: string
          enum: [ACTIVE, USED, EXPIRED]

    PatientBrief:
      type: object
      properties:
        id:
          type: string
          format: uuid
          description: Unique identifier for the patient
        fullName:
          type: string
          description: Full name of the patient
      required:
        - id
        - fullName

    PatientProfile:
      type: object
      properties:
        patientId:
          type: string
          format: uuid
        firstName:
          type: string
        lastName:
          type: string
        phoneNumber:
          type: string
        email:
          type: string
          format: email
        address:
          $ref: '#/components/schemas/Address'
      required:
        - patientId
        - email
        - firstName
        - lastName
        - phoneNumber

    LoginRequest:
      type: object
      properties:
        username:
          type: string
        password:
          type: string
      required:
        - username
        - password

    RegisterRequest:
      type: object
      properties:
        email:
          type: string
          format: email
        password:
          type: string
          minLength: 8
        firstName:
          type: string
        lastName:
          type: string
        phoneNumber:
          type: string
      required:
        - email
        - username
        - password
        - firstName
        - lastName
        - phoneNumber

    Address:
      type: object
      properties:
        id:
          type: string
          format: uuid
          description: Unique identifier for the address
        country:
          type: string
        city:
          type: string
        district:
          type: string
        street:
          type: string
        postalCode:
          type: string
      required:
        - id
        - country
        - city
        - street
        - postalCode

    ClinicBrief:
      type: object
      properties:
        id:
          type: string
          format: uuid
          description: Unique identifier for the location
        name:
          type: string
          description: Name of the clinic
        address:
          type: string
          description: Full address including country, city, street and postal code
      required:
        - id
        - name
        - address

    ClinicDetails:
      type: object
      properties:
        id:
          type: string
          format: uuid
          description: Unique identifier for the location
        name:
          type: string
          description: Name of the clinic
        address:
          type: string
          description: Full address including country, city, street and postal code
        phone:
          type: string
        email:
          type: string
          format: email
        coordinates:
          $ref: '#/components/schemas/Coordinates'
      required:
        - id
        - name
        - address

    Document:
      type: object
      properties:
        id:
          type: string
          format: uuid
          description: Unique identifier for the document
        name:
          type: string
          description: Name/title of the document
        description:
          type: string
          description: Detailed description or content of the document
        createdAt:
          type: string
          format: date-time
          description: Date and time when the document was created
        fileUrl:
          type: string
          format: uri
          description: URL to the document file in cloud storage
        doctor:
          $ref: '#/components/schemas/DoctorBrief'
          description: Brief information about the doctor who created the document
        patient:
          $ref: '#/components/schemas/PatientBrief'
          description: Brief information about the patient the document is about
      required:
        - id
        - name
        - description
        - createdAt
        - fileUrl
        - doctor
        - patient

    Notification:
      type: object
      properties:
        id:
          type: string
          format: uuid
        title:
          type: string
        subtitle:
          type: string
        receivedDate:
          type: string
          format: date
        read:
          type: boolean
          default: false
        content:
          type: string
      required:
        - id
        - title
        - subtitle
        - receivedDate
        - content

    NotificationListItem:
      type: object
      properties:
        id:
          type: string
          format: uuid
        title:
          type: string
        subtitle:
          type: string
        receivedDate:
          type: string
          format: date
        read:
          type: boolean
          default: false
      required:
        - id
        - title
        - subtitle
        - receivedDate

    CMSPageContent:
      type: object
      properties:
        slug:
          type: string
        lastUpdated:
          type: string
          format: date-time
        content:
          type: string
          description: Markdown content
      required:
        - slug
        - lastUpdated
        - content

    ServiceType:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
      required:
        - id
        - name

    ServiceOffer:
      type: object
      properties:
        id:
          type: string
          format: uuid
        serviceType:
          type: string
        duration:
          type: number
          description: Duration in minutes
        price:
          type: number
          description: Price in the local currency
        description:
          type: string
      required:
        - id
        - serviceType
        - duration
        - price
        - description

    Billing:
      type: object
      properties:
        amount:
          type: number
        status:
          type: string
          enum: [PENDING, PAID, CANCELLED]
      required:
        - amount
        - status

    Coordinates:
      type: object
      properties:
        latitude:
          type: number
        longitude:
          type: number
      required:
        - latitude
        - longitude

    AppStatus:
      type: object
      properties:
        unreadNotificationsCount:
          type: integer
          description: Number of unread notifications
          minimum: 0
      required:
        - unreadNotificationsCount
